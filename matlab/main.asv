%%% Cheng Huimin
%%% Oct 2018

clear all;
close all;
% rosshutdown;

clc;
% rosinit('arena-glass.local');

global reset;

if (isempty(reset))
    reset = true;
end

%% Figures for Raw Inputs
global h_imu_ax h_imu_ay h_imu_az;
global h_imu_gx h_imu_gy h_imu_gz;
% global h_mag_x h_mag_y h_mag_z;

f1 = figure();
% Configure accerlation raw plot
subplot(1,2,1);
h_imu_ax = animatedline('Color','r','MaximumNumPoints',60);
h_imu_ay = animatedline('Color','g','MaximumNumPoints',60);
h_imu_az = animatedline('Color','b','MaximumNumPoints',60);
axis tight
axis([-inf,inf,-20,20]);
title('Accelerometer Raw Data');
legend('ax','ay','az');

% Configure gyroscope raw plot
subplot(1,2,2);
h_imu_gx = animatedline('Color','r','MaximumNumPoints',60);
h_imu_gy = animatedline('Color','g','MaximumNumPoints',60);
h_imu_gz = animatedline('Color','b','MaximumNumPoints',60);
axis tight
axis([-inf,inf,-10,10]);
title('Gyroscope Raw Data');
legend('gx','gy','gz');



%% Figures for Integrated Position and Velocity

global h_vx h_vy h_vz h_pxy h_pz;
% Figure for velocity
f2 = figure();
h_vx = animatedline('Color','r','MaximumNumPoints',60);
h_vy = animatedline('Color','g','MaximumNumPoints',60);
h_vz = animatedline('Color','b','MaximumNumPoints',60);
axis tight
axis([-inf,inf,-3,3]);
title('Naive Method: Velocity');
legend('vx','vy','vz');

% Figure for position
f3 = figure();
subplot(1,2,1);
h_pxy = animatedline('Color','r','MaximumNumPoints',1000, 'Marker', '+');
axis equal
axis([-5,5,-5,5]);
title('Naive Method: Position XY');
legend('Position XY');

subplot(1,2,2);
h_pz = animatedline('Color','r','MaximumNumPoints',60);
axis tight
axis([-inf,inf,-10,10]);
title('Naive Method: Position Z');
legend('Position Z');
        
        
%% Register ROS subscriber callback
imu_sub = rossubscriber('/imu0', 'sensor_msgs/Imu' ,@imu_callback);
odometry_sub = rossubscriber('/dead_reckoning', 'nav_msgs/Odometry', @odometry_callback);
% mag_sub = rossubscriber('/mag0', 'sensor_msgs/MagneticField', @mag_callback);

reset_pub = rospublisher('/reset','std_msgs/Header');

%% Waiting
pause(1);
while true
    pause(1);
    reset = false;
    key = input('press return to reset, q and return to quit: ','s');  
    if (~isempty(key))
        break;
    end
    msg = rosmessage(reset_pub);
    reset_pub()
    reset = true;
end
clear imu_sub;
clear mag_sub;
% rosshutdown;